<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[webpack4构建vue项目（二）]]></title>
    <url>%2Fwebpack%2F</url>
    <content type="text"><![CDATA[前言距离上篇文章9102年webpack4搭建vue项目已经过了将近两个月了，一直没有时间写文章，公司项目比较多，这两个月一直在加班，最近大家一直在讨论996.icu，其实我想发表一点自己的看法，关于加班我的座右铭一直是：只要工资给到位，加班无所谓。尴尬的就是我们公司不给加班费，而且不让调休，哈哈哈，相信大多数公司都是如此，所以呢，所以呢，直到今天才能给大家分享文章，想看上篇文章的同学点这里[传送门](https://www.imooc.com/article/279078)好了废话不多说开始撸代码。 新建文件夹1mkdir wepack-vue //文件名字可以随便 新建package.json文件1npm init -y webpack配置 新建build文件夹1mkdir build build文件夹新建webpack.base.conf.js，webpack.dev.conf.js，webpack.prod.conf.jswebpack.base.conf.js 存放公共配置webpack.prod.conf.js 存放生产环境配置webpack.dev.conf.js 存放开发环境配置 创建src文件夹并创建main.js 创建index.html 123456789101112&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;webpack搭建vue项目&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="app"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 下载webpack webpack-dev-server webpack-cli 1npm i webpack webpack-dev-server webpack-cli -D 打开webpack.base.config.js，并配置webpack整体属性 1234567891011121314151617181920var path = require('path');var webpack = require('webpack');module.exports = &#123; entry: &#123; main: path.resolve(__dirname, '../src/main.js') &#125;, output: &#123; path: path.resolve(__dirname, '../src'), filname: '[name].[bash].js', &#125;, module: &#123; rules: [] &#125;, pligins: [ new webpack.HashedModuleIdsPlugin(), // 解决vender后面的hash每次都改变 ], resolve: &#123; &#125;&#125; 配置loader 下载babel-loader，babel-core，babel-preset-dev，rules并配置js babel-preset-env 帮助我们配置 babel。我们只需要告诉它我们要兼容的情况（目标运行环境），它就会自动把代码转换为兼容对应环境的代码。 babel-core是作为babel的核心存在，babel的核心api都在这个模块里面 tips: babel是7.X的话babel-core必须是6.X，否则不兼容 1npm i babel-loader babel-core babel-preset-env@7 -D 1234567rules:[ &#123; test: /\.js$/, use: ['babel-loader'], exclude: /node_modules/ &#125;] 新建.babelrc文件，.babelrc是babel全局配置文件 123456789101112&#123; "preset": [ ['env',&#123; "targets": &#123;// 指定转译到那个环境 //浏览器环境 "browsers": ["&gt; 1%", "last 2 versions", "not ie &lt;= 8"], &#125;, //是否将ES6的模块化语法转译成其他类型 "modules": false &#125;] ]&#125; 下载file-loader，rules并配置文件（图片和字体） 1npm i file-loader -D 123456789rules:[ &#123; test: /\.(jpg|png|svg|gif)$/, use: ['file-loader'] &#125;, &#123; test: '/\.(woff|woff2|eot|ttf|otf)$/', use: ['file-loader'] &#125;,] 下载css-loader，vue-style-loader，sass-loader， node-sass，并配置css，scss，sass 1npm i css-loader vue-style-loader sass-loader node-sass -D 12345678910rules:[ &#123; test: /\.(sa|sc|c)ss$/, use: [ &#123;loader: 'vue-style-loader'&#125;, 'css-loader', 'sass-loader' ] &#125;, ] 下载less，less-loader，并配置less 1npm i less-loader less -D 12345678910rules:[ &#123; test: /\.less$/, use: [ &#123;loader: 'vue-style-loader'&#125;, 'css-loader', 'less-loader' ] &#125;, ] 生成html文件 下载html-webpack-plugin，并配置npm i html-webpack-plugin -D 1234567// 引入html-webpack-pluginvar HtmlWebpackPlugin = require('html-webpack-plugin');plugins: [ new HtmlWebpackPlugin(&#123; template: path.resolve(__diename, '../index.html') &#125;),] 配置解析模块1234resolve: &#123; // 能够使用户在引入模块时不带扩展 extensions: ['.js', '.json', '.vue', 'css']&#125; base模块配置了一些东西但没有配置完，会在后边一点一点加上，接下来配置dev和prod 配置webpack.dev.conf 下载 webpack-merge 1npm i webpack-merge -D webpack.dev.js 12345678910111213141516var merge = require('webpack-merge');var baseConfig = require('./webpack.base.conf');var path = require('path');var webpack = reuire('webpack');module.exports = merge(baseConfig, &#123; devtool: 'inline-source-map', // 压缩方式 mode: 'development' devServer: &#123; hot: true, // 热更新 open: true, // 自动打开页面 contentBase: path.resolve(__dirname, '../dist'), // 告诉服务从哪提供内容 &#125;, plugins: [ new.webpack.HotModuleReplacementPlugin(), //开启热更新 ]&#125;) 配置webpack.prod.confwebpack.prod.conf.js 12345678910var merge = require('webpack-merge');var baseConfig = require('./webpack.base.conf');var path = require('path');var webpack = reuire('webpack');module.exports = merge(baseConfig, &#123; devtool: 'source-map', // 压缩方式 mode: 'production' plugins: [ ]&#125;) 配置vue-loader 下载vue-loader，vue，vue-template-compiler, 并配置vue解析文件，配置webpack.base.cond.js 1npm i vue vue-loader vue-template-compiler -D 1234567891011121314151617181920212223var VueLoaderPlugin = require('vue-loader/lib/plugin');// 省略代码......rules:[ &#123; test: /\.vue$/, use: ['vue-loader'], exclude: /node_modules/ &#125;, ]// 省略代码.......// 省略代码....plugins: [ new VueLoaderPlugin(), // 它的职责是将你定义过的其它规则复制并应用到 .vue 文件里相应语言的块]// 省略代码...配置vue别名，确保webpack可以找到.vue文件// 省略代码...reslove: &#123; alias: [ 'vue$': 'vue/dist/vue.esm.js', //配置别名 确保webpack可以找到.vue文件 '@': path.resolve(__dirname, '../src') ]&#125; 新建App.vue文件 1234567891011121314151617&lt;template&gt; &lt;div&gt;&#123;&#123;str&#125;&#125;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: 'App', data () &#123; return &#123; str: 'hello' &#125; &#125;&#125;&lt;/script&gt;&lt;style&gt;div &#123; color: red;&#125;&lt;/style&gt; 在main.js中引入vue 1234567import VUe from 'vue'import App from './App'new Vue(&#123; el: "#app", render: (h) =&gt; h(App)&#125;) 配置命令 找到package.json文件，并配置开发和打包命令 12345// 省略代码。。。"scripts": &#123; "dev": "webpack-dev-server --progress --config build/webpack.dev.conf.js", "build": "webpack --config build/webpack.prod.conf.js" &#125; 运行项目 1npm run dev 可以看到项目已经跑起来了 区分环境引入不同地址 新建config文件夹并新建dev.ev.js和prod.env.js dev.env.js 开发环境配置 123456'use strict'module.exports = &#123; NODE_ENV: '"development"', BASE_API: '"http://1456"',&#125; prod.env.js 生产环境配置 12345'use strict'module.exports = &#123; NODE_ENV: '"production"', BASE_API: '"http://123.com"',&#125; 优化webpack配置 解决更改文件打包时dist文件没有清除，再次打包。 下载clean-webpack-plugin，并配置webpack.prod.conf.js文件 1234567npm i clean-webpack-plugin -D// 引入clean-webpack-pluginvar CleanWebpackPlugin = require('clean-webpack-plugin');// 省略代码。。。。plugins: [ new CleanWebPackPlugin();] 根据不同环境提取css 下载mini-css-extract-plugin，并配置webpack.prod.conf.js文件 1npm i mini-css-extract-plugin -D 更改webpack.prod.conf.js中使用vue-style-loader的代码，更改为 123456789101112131415161718192021222324module: &#123; rules: [ &#123; test: /\.(c|sc|sa)ss$/, use: [ &#123; loader: MiniCssExtractPlugin.loader, &#125;, 'css-loader', 'sass-loader' ] &#125;, &#123; test: /\.less$/, use: [ &#123; loader: MiniCssExtractPlugin.loader, &#125;, 'css-loader', 'less-loader' ] &#125; ] &#125;, 在webpack.prod.conf.js的plugin中配置 1234567891011121314151617181920212223242526272829new MiniCssExtractPlugin(&#123; filename: '[name].[hash].js'&#125;)webpack.base.conf.js中删除使用vue-style-loader的代码，并在webpack.dev.conf.js中定义 module: &#123; rules: [ &#123; test: /\.(c|sc|sa)ss$/, use: [ &#123; loader: 'vue-style-loader', &#125;, 'css-loader', 'sass-loader' ] &#125;, &#123; test: /\.less$/, use: [ &#123; loader: 'vue-style-loader', &#125;, 'css-loader', 'less-loader' ] &#125; ] &#125;, 这个配置vue-loader中有提到配置css单独打包 第三方库单独打包 把依赖的第三方库抽取出来单独打包，加快打包进度 下载autodll-webpack-plugin 1npm i autodll-webpack-plugin -D 在webpack.base.conf.js中配置 123456789101112var AutodllWebpackpackPlugin = require('autodll-webpack-plugin');plugins: [ new AutodllWebpackpackPlugin (&#123; inject: true, debugger: true, filename: '[name].js', path: './dll', entry: &#123; vendor: ['vue'] &#125; &#125;)] tips: inject 为 true，插件会自动把打包出来的第三方库文件插入到 HTML。filename 是打包后文件的名称。path 是打包后的路径。entry 是入口，vendor 是你指定的名称，数组内容就是要打包的第三方库的名称，不要写全路径，Webpack 会自动去 node_modules 中找到的。 提取公共代码 在 webpack.base.conf.js的 plugins 属性中添加如下插件对象 1new webpack.optimize.SplitChunksPlugin() 打包时压缩js和css 下载optimize-css-assets-webpack-plugin和uglifyjs-webpack-plugin 1npm i uglifyjs-webpack-plugin uglifyjs-webpack-plugin -D 在webpack.prod.conf.js中分别引入optimize-css-assets-webpack-plugin和uglifyjs-webpack-plugin并增加optimization 12345678910111213141516171819202122var OptimizeCSSAssetsPlugin = require("optimize-css-assets-webpack-plugin");var UglifyJsPlugin = require("uglifyjs-webpack-plugin");// ...省略号 optimization: &#123; minimizer: [ // 压缩JS new UglifyJsPlugin(&#123; uglifyOptions: &#123; compress: &#123; warnings: false, // 去除警告 drop_debugger: true, // 去除debugger drop_console: true // 去除console.log &#125;, &#125;, cache: true, // 开启缓存 parallel: true, // 平行压缩 sourceMap: false // set to true if you want JS source maps &#125;), // 压缩css new OptimizeCSSAssetsPlugin(&#123;&#125;) ] &#125;, css自动加前缀 下载postcss-loader 和autoprefixer 1npm i postcss-loader autoprefixer -D 分别在webpack.dev.conf.js和webpack.prod.conf.js的use中添加postcss-loader 123use: [ 'postcss-loader'] 在项目下增加postcss.config.js 123456// 配置cssz加前缀module.exports = &#123; plugins: [ require('autoprefixer') ]&#125; 以上配置的项目就可以跑起来了，谢谢大家，如有错误，敬请指出，一起在码农的道路上越走越远 感恩骗点star项目地址项目地址 占位下一篇会介绍vue搭建后台项目]]></content>
      <tags>
        <tag>webpack配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序转发好友]]></title>
    <url>%2Fwx%2F</url>
    <content type="text"><![CDATA[今天简单地说下微信小程序的转发功能，为什么要简单的说下呢，因为主要讲的就是转发给好友或者群组，还有一种是分享到朋友圈，这种就比较复杂一点了，先稍微透漏一点，分享到朋友圈主要是两种方法，一种是后台直接生成海报图，一种是前端通过canvas生成海报。以后有机会再详细说，好了，言归正传继续说我们的转发好友。&lt; !–more–&gt; 首先介绍一个微信小程序的API：onShareAppMessage(options) 在 Page 中定义 onShareAppMessage 函数，设置该页面的转发信息。 只有定义了此事件处理函数，右上角菜单才会显示 “转发” 按钮 用户点击转发按钮的时候会调用 此事件需要 return 一个 Object，用于自定义转发内容 options 参数说明 参数 类型 说明 最低版本 from String 转发事件来源。button：页面内转发按钮；menu：右上角转发菜单 1.2.4 target Object 如果 from 值是 button，则 target 是触发这次转发事件的 button，否则为 undefined 1.2.4 自定义转发字段 字段 说明 默认值 最低版本 title 转发标题 当前小程序名称 1.2.4 path 转发路径 当前页面 path ，必须是以 / 开头的完整路径 imageUrl 自定义图片路径，可以是本地文件路径、代码包文件路径或者网络图片路径，支持PNG及JPG，不传入 imageUrl 则使用默认截图。显示图片长宽比是 5:4 1.5.0 success 转发成功的回调函数 1.1.0 fail 转发失败的回调函数 1.1.0 complete 转发结束的回调函数（转发成功、失败都会执行） 1.1.0 还有一个值那就是shareTickets他是转发成功返回的，并且是个数组，每一项是一个 shareTicket ，对应一个转发对象 API先说到这，接下来就是转发的实现 先看图： 首先要在onLoad中配置wx.showShareMenu123456onLoad: function (e) &#123; wx.showShareMenu(&#123; // 要求小程序返回分享目标信息 withShareTicket: true &#125;); &#125;, 然后再配置onShareAppMessage123456789101112131415161718192021222324252627282930/* 转发*/ onShareAppMessage: function (ops) &#123; if (ops.from === 'button') &#123; // 来自页面内转发按钮 console.log(ops.target) &#125; return &#123; title: '转发dom', path: `pages/index/index`, success: function (res) &#123; // 转发成功 console.log("转发成功:" + JSON.stringify(res)); var shareTickets = res.shareTickets; // if (shareTickets.length == 0) &#123; // return false; // &#125; // //可以获取群组信息 // wx.getShareInfo(&#123; // shareTicket: shareTickets[0], // success: function (res) &#123; // console.log(res) // &#125; // &#125;) &#125;, fail: function (res) &#123; // 转发失败 console.log("转发失败:" + JSON.stringify(res)); &#125; &#125; &#125;, 我解释一下wx.getShareInfo这个可以获取到获取转发详细信息 完整js代码就是123456789101112131415161718192021222324252627282930313233343536373839404142434445//index.js//获取应用实例const app = getApp()Page(&#123; data: &#123; motto: 'Hello World', &#125;, onLoad: function (e) &#123; wx.showShareMenu(&#123; // 要求小程序返回分享目标信息 withShareTicket: true &#125;); &#125;, /* 转发*/ onShareAppMessage: function (ops) &#123; if (ops.from === 'button') &#123; // 来自页面内转发按钮 console.log(ops.target) &#125; return &#123; title: '转发dom', path: `pages/index/index`, success: function (res) &#123; // 转发成功 console.log("转发成功:" + JSON.stringify(res)); var shareTickets = res.shareTickets; // if (shareTickets.length == 0) &#123; // return false; // &#125; // //可以获取群组信息 // wx.getShareInfo(&#123; // shareTicket: shareTickets[0], // success: function (res) &#123; // console.log(res) // &#125; // &#125;) &#125;, fail: function (res) &#123; // 转发失败 console.log("转发失败:" + JSON.stringify(res)); &#125; &#125; &#125;,&#125;) 聪明的同学就该知道接下来该是wxml代码12345678&lt;view class="container"&gt; &lt;view class="userinfo"&gt; &lt;button open-type="share"&gt;分享好友&lt;/button&gt; &lt;/view&gt; &lt;view class="usermotto"&gt; &lt;text class="user-motto"&gt;&#123;&#123;motto&#125;&#125;&lt;/text&gt; &lt;/view&gt;&lt;/view&gt; 友情提示一下如果点击按钮分享的话，button一定要设置open-type=”share”否则不起作用。如果觉得文章还不错并对你有帮助的话，请分享给你的小伙伴，并点赞，有什么不懂得可以在底下留言哦。如果想看源码的话可以去我的github上下载，欢迎star，[github]: https://github.com/Mr-MengBo/wx-share]]></content>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端必备开发网站]]></title>
    <url>%2Fwebsite%2F</url>
    <content type="text"><![CDATA[大牛博客： 阮一峰博客：http://www.ruanyifeng.com/blog/ 愚人码头博客：http://www.css88.com/ 张鑫旭博客：http://www.zhangxinxu.com/wordpress/ 勾三股四博客：http://jiongks.name/ 前端博客：http://caibaojian.com/ 大漠穷秋：https://my.oschina.net/mumu/ 视频教程： 极客学院：http://www.jikexueyuan.com/ 慕课网视频教程： http://www.imooc.com/ 前端社区： 前端网: http://www.qdfuns.com/ frontopen：http://www.frontopen.com/ w3cplus：http://www.w3cplus.com/ 大前端：http://www.daqianduan.com/ 伯乐在线：http://www.jobbole.com/ 前端里：http://www.yyyweb.com/ 爱思资源网：http://www.aseoe.com/ 前端观察：https://www.qianduan.net/ 前端开发俱乐部：http://www.html-js.cn/ 前端工具类汇总： 前端开发仓库：http://code.ciaoca.com/ 极客学院wiki：http://wiki.jikexueyuan.com/ 前端在线编辑器：http://runjs.cn/code Bootstrap中文网开源项目免费CDN：http://www.bootcdn.cn/ 程序员综合： github：https://github.com/ 开源中国：https://www.oschina.net/ CSDN：http://www.csdn.net/ 博客园：http://www.cnblogs.com/ 框架文章： VUE中文：vuejs.org.cn VUE 2.0教程：https://vuefe.cn/v2/guide/ ReactJs中文教程：http://reactjs.cn/react/docs/getting-started-zh-CN.html 菜鸟教程：www.runoob.com ECMAScript 6：http://es6.ruanyifeng.com/ Angularjs中文教程：http://www.apjs.net/ Requirejs中文: http://www.requirejs.cn/ node中文网：http://cnodejs.org/getstart express中文网：http://www.expressjs.com.cn/ 预编译、打包、构建工具： less：http://less.bootcss.com/ sass：http://sass.bootcss.com/ coffeescript：http://coffee-script.org/ pugjs（也就是Jade）：https://github.com/pugjs/pug babeljs：http://babeljs.cn/ grunt中文网：http://www.gruntjs.net/ gulp中文网：http://www.gulpjs.com.cn/ webpack中文网：http://webpackdoc.com/ 前端团队博客: 腾讯前端团队: http://www.alloyteam.com/ https://github.com/AlloyTeam/ 淘宝前端团队: http://taobaofed.org/ https://github.com/taobaofed Firefox技术文档: https://developer.mozilla.org/zh-CN/ https://hacks.mozilla.org/ 开发工具IDE: sublime：www.sublimetext.com/ webstorm：http://www.jetbrains.com/webstorm/ vscode: https://code.visualstudio.com/Download Hbuilder：www.dcloud.io IntelliJ IDEA：http://www.jetbrains.com/idea/ 注：资源来源于自己长期收集整理而来，如有和其他网站和论坛相同部分，在此抱歉！]]></content>
      <tags>
        <tag>前端必备</tag>
      </tags>
  </entry>
</search>
